security:
  # https://symfony.com/doc/current/security.html#registering-the-user-hashing-passwords
  password_hashers:
    Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface: "auto"

  # https://symfony.com/doc/current/security.html#loading-the-user-the-user-provider
  providers:
    # used to reload user from session & other features (e.g. switch_user)
    app_user_provider:
      entity:
        class: App\Entity\PureUser
        property: email

  firewalls:
    admin_area:
        pattern: ^/admin
        lazy: true
        provider: app_user_provider
        custom_authenticator: App\Security\AdminAuthenticator
        entry_point: App\Security\AdminAuthenticator
        logout:
            path: admin_logout
        remember_me:
            secret: "%kernel.secret%"
            lifetime: 604800
            path: /admin

    main:
      pattern: ^/
      lazy: true
      provider: app_user_provider
      custom_authenticator: App\Security\AuthAuthenticator
      entry_point: App\Security\AuthAuthenticator
      logout:
        path: app_logout
      remember_me:
        secret: "%kernel.secret%"
        lifetime: 604800
        path: /

  access_control:
    - { path: ^/admin/connexion, roles: PUBLIC_ACCESS }
    - { path: ^/admin/dashboard, roles: ROLE_ADMIN }
    - { path: ^/connexion, roles: PUBLIC_ACCESS }
    - { path: ^/user, roles: ROLE_USER }
    - { path: ^/, roles: PUBLIC_ACCESS }
  
  role_hierarchy:
        ROLE_ADMIN: [ROLE_VENDEUR, ROLE_ACHETEUR]
        ROLE_VENDEUR: ROLE_USER
        ROLE_ACHETEUR: ROLE_USER


when@test:
  security:
    password_hashers:
      # By default, password hashers are resource intensive and take time. This is
      # important to generate secure password hashes. In tests however, secure hashes
      # are not important, waste resources and increase test times. The following
      # reduces the work factor to the lowest possible values.
      Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
        algorithm: auto
        cost: 4 # Lowest possible value for bcrypt
        time_cost: 3 # Lowest possible value for argon
        memory_cost: 10 # Lowest possible value for argon
